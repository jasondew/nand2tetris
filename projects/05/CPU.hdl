// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

 /*
 A instruction (leftmost bit is 0), interpret lower 15 bits as binary value
 C instruction (leftmost bit is 1): 1xxaccccccdddjjj
     the a-bit determines whether the ALU input will be fed from the A register value or from the incoming M value.
     the cccccc bits determine which function the ALU will compute

         MDA
     the ddd bits code the dest part of the instruction
     the ddd bits determine which registers should accept the ALU output

         <=>
     the jjj bits code the jump part of the instruction
     the jjj bits are used for determining which instruction to fetch next

     the xx bits are ignored
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aIn);

    And(a=instruction[3], b=instruction[15], out=writeM);
    And(a=instruction[4], b=instruction[15], out=loadD);
    Not(in=instruction[15], out=aInstr);
    Or(a=instruction[5], b=aInstr, out=loadA);
    DRegister(in=aluOut, load=loadD, out=dOut);
    ARegister(in=aIn, load=loadA, out=aOut);

    Mux16(a=aOut, b=inM, sel=instruction[12], out=aluIn);
    ALU(x=dOut, y=aluIn, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, zr=zero, ng=negative);

    Mux16(a=aOut, b=false, sel=false, out[0..14]=addressM);
    Mux16(a=aluOut, b=false, sel=false, out=outM);

    // compute jumps
    Or(a=negative, b=zero, out=negativeOrZero);
    Not(in=negativeOrZero, out=positive);
    And(a=instruction[0], b=positive, out=jumpGT);
    And(a=instruction[1], b=zero, out=jumpZero);
    And(a=instruction[2], b=negative, out=jumpLT);
    Or(a=jumpGT, b=jumpZero, out=jumpGTE);
    Or(a=jumpGTE, b=jumpLT, out=jumpAny);
    And(a=jumpAny, b=instruction[15], out=jump);

    PC(in=aOut, load=jump, inc=true, reset=reset, out[0..14]=pc);
}
