class Snake {
  field Array positions;
  field int size;
  field int dx;
  field int dy;

  constructor Snake new() {
    let positions = Array.new(100);
    let positions[0] = Position.new(2, 2);
    let size = 1;
    let dx = 1;
    let dy = 0;

    return this;
  }

  method void dispose() {
    do positions.dispose();
    do Memory.deAlloc(this);

    return;
  }

  method Position getHeadPosition() { return positions[size - 1]; }

  method void goLeft()  { let dx = -1; let dy =  0; return; }
  method void goRight() { let dx =  1; let dy =  0; return; }
  method void goUp()    { let dx =  0; let dy = -1; return; }
  method void goDown()  { let dx =  0; let dy =  1; return; }

  method Position nextPosition() {
    var Position headPosition;
    var int x, y;

    let headPosition = getHeadPosition();
    let x = headPosition.getX();
    let y = headPosition.getY();

    return Position.new(headPosition.getX() + dx, headPosition.getY() + dy);
  }

  method void grow() {
    let positions[size] = nextPosition();
    let size = size + 1;

    return;
  }

  method void move() {
    var int index;

    let index = 1;

    do Memory.deAlloc(positions[0]);

    while (index < size) {

      let positions[index - 1] = positions[index];
      let index = index + 1;
    }

    let positions[size - 1] = nextPosition();

    return;
  }

  method boolean crossing() {
    var boolean answer;
    var int index;
    var Position headPosition, position;

    let index = 0;
    let headPosition = getHeadPosition();

    while (index < (size - 1)) {
      let position = positions[index];
      if (Position.equal(position, headPosition)) {
        return true;
      }
      let index = index + 1;
    }

    return false;
  }

  method void draw() {
    var int index;
    var Position position;

    let index = 0;

    while (index < size) {
      let position = positions[index];
      do Screen.drawCircle(position.getX(), position.getY(), 2);
      let index = index + 1;
    }

    return;
  }
}
